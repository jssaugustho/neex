// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//user & authentication
model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  email             String             @unique
  emailVerified     Boolean            @default(false)
  emailNotification Boolean            @default(true)
  agree             Boolean            @default(true)
  name              String
  lastName          String             @default("")
  passwd            String
  phone             String
  support           Json
  role              Role               @default(USER)
  token             Token[]
  Lead              Lead[]
  quiz              Quiz[]
  transactions      Transactions[]
  step              Step[]
  verificationCode  VerificationCode[]

  @@unique([id, support])
}

model VerificationCode {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String
  expiresOn DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @id @map("_id") @db.ObjectId
}

model Token {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @id @map("_id") @db.ObjectId
}

//quiz & leads
model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  slug      String
  steps     Json
  Lead      Lead[]
}

model Lead {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId, support], references: [id, support])
  userId       String         @db.ObjectId
  quiz         Quiz           @relation(fields: [quizId], references: [id])
  quizId       String         @db.ObjectId
  quizData     Json
  support      Json
  Transactions Transactions[]
}

model Step {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  steps     Json
}

model Intention {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String
  destiny     String   @default("")
}

//finances
model Transactions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String   @db.ObjectId
  value     Int
  type      Boolean
}

enum Role {
  ADMIN
  USER
}
