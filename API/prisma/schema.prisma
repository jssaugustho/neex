// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//user & authentication
model Case {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  Account     Account[]
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  active               Boolean        @default(true)
  email                String         @unique
  emailVerified        Boolean        @default(false)
  name                 String
  lastName             String         @default("")
  passwd               String
  phone                String         @unique
  authorizedSessions   Session[]      @relation("AuthorizedSessions", fields: [authorizedSessionsId], references: [id])
  authorizedSessionsId String[]       @db.ObjectId
  role                 Role           @default(USER)
  Lead                 Lead[]
  quiz                 Quiz[]
  verification         Verification[]
  SupportAccounts      Support[]
  Accounts             Account[]
  Session              Session[]      @relation("authenticatedUser")
}

model Session {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  lastActivity            DateTime       @default(now())
  ip                      String
  location                Json           @default("{}")
  fingerprint             String
  name                    String
  attempts                Json           @default("{}")
  token                   String         @default("")
  refreshToken            String         @default("")
  exponencialEmailExpires Int            @default(-1)
  user                    User?          @relation("authenticatedUser", fields: [userId], references: [id])
  userId                  String?        @db.ObjectId
  VerificationCode        Verification[]
  authorizedUsers         User[]         @relation("AuthorizedSessions", fields: [authorizedUsersId], references: [id])
  authorizedUsersId       String[]       @db.ObjectId
}

model Account {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  accessList Support[]
  owner      User        @relation(fields: [ownerId], references: [id])
  ownerId    String      @db.ObjectId
  case       Case        @relation(fields: [caseId], references: [id])
  caseId     String      @db.ObjectId
  Campaign   Campaign[]
  Step       Step[]
  Intention  Intention[]
}

model Campaign {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  type      CampaignType @default(PRODUCTION)
  name      String
  account   Account      @relation(fields: [accountId], references: [id])
  accountId String       @db.ObjectId
  AdGroup   AdGroup[]
}

model AdGroup {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String
  campaign   Campaign   @relation(fields: [campaignId], references: [id])
  campaignId String     @db.ObjectId
  Keywords   Keywords[]
}

model Keywords {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  adGroup   AdGroup  @relation(fields: [adGroupId], references: [id])
  adGroupId String   @db.ObjectId
}

model Support {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(PENDING)
  role          Role     @default(SUPPORT)
  account       Account  @relation(fields: [accountId], references: [id])
  accountId     String   @db.ObjectId
  supportUser   User     @relation(fields: [supportUserId], references: [id])
  supportUserId String   @db.ObjectId

  @@unique([accountId, supportUserId])
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  used      Boolean  @default(false)
  token     String
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique @db.ObjectId
}

//quiz & leads
model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  slug      String
  steps     Json
  Lead      Lead[]
}

model Lead {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  quiz         Quiz          @relation(fields: [quizId], references: [id])
  quizId       String        @db.ObjectId
  quizData     Json
  Transactions Transaction[]
}

model Step {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @db.ObjectId
  steps     Json[]
}

model Intention {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String   @db.ObjectId
  name        String   @unique
  description String
  destiny     String   @default("")
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String   @db.ObjectId
  value     Int
  type      Boolean
}

model TransacionalEmailQueue {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  to        String
  subject   String
  body      String
  status    String   @default("pending") // pending, sent, failed
  error     Json     @default("{}")
  emailId   String   @default("")
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  REJECTED
  WAITING
  SUCCESS
  FAILED
}

enum Role {
  ADMIN
  SUPPORT
  USER
}

enum CampaignType {
  BETA
  PRODUCTION
  MODEL
}
