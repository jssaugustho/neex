// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  lastActivity            DateTime @default(now())
  ip                      Ip       @relation(fields: [ipId], references: [id])
  ipId                    String   @db.ObjectId
  fingerprint             String
  userAgent               String
  locale                  String
  timeZone                String
  name                    String
  token                   String   @default("")
  refreshToken            String   @default("")
  exponencialEmailExpires Int      @default(-1)
  user                    User?    @relation("authenticatedUser", fields: [userId], references: [id])
  userId                  String?  @db.ObjectId
  unauthorizedUsers       User[]   @relation("unauthorizedSessions", fields: [unauthorizedUsersId], references: [id])
  unauthorizedUsersId     String[] @db.ObjectId
  passwds Passwd[]
  // logoutToken String 
}

model Ip {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastActivity      DateTime  @default(now())
  address           String    @unique
  city              String
  region            String
  country           String
  timeZone          String
  ll                Float[]
  session           Session[]
  attempt           Attempt[]
  authorizedUsers   User[]    @relation("authorizedIps", fields: [authorizedUsersId], references: [id])
  authorizedUsersId String[]  @db.ObjectId
}

model Attempt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  ip        Ip       @relation(fields: [ipId], references: [id])
  ipId      String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  active    Boolean  @default(true)
}

model Verification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  used      Boolean          @default(false)
  token     String
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
  type      VerificationType
}

model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  active                 Boolean        @default(true)
  email                  String         @unique
  emailVerified          Boolean        @default(false)
  name                   String
  lastName               String         @default("")
  phone                  String         @unique
  role                   Role           @default(USER)
  locale String
  timeZone String
  passwd                 Passwd[]      
  Lead                   Lead[]
  quiz                   Quiz[]
  verification           Verification[]
  SupportAccounts        Support[]
  Accounts               Account[]
  Session                Session[]      @relation("authenticatedUser")
  Attempt                Attempt[]
  authorizedIps          Ip[]           @relation("authorizedIps", fields: [authorizedIpsId], references: [id])
  authorizedIpsId        String[]       @db.ObjectId
  unauthorizedSessions   Session[]      @relation("unauthorizedSessions", fields: [unauthorizedSessionsId], references: [id])
  unauthorizedSessionsId String[]       @db.ObjectId
}

model Passwd {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  active     Boolean
  hash       String
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  session Session @relation(fields: [sessionId], references: [id])
  sessionId  String      @db.ObjectId
}

model Account {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  accessList Support[]
  owner      User        @relation(fields: [ownerId], references: [id])
  ownerId    String      @db.ObjectId
  case       Case        @relation(fields: [caseId], references: [id])
  caseId     String      @db.ObjectId
  Step       Step[]
  Intention  Intention[]
}

//user & authentication
model Case {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  Account     Account[]
}

model Support {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(PENDING)
  role          Role     @default(SUPPORT)
  account       Account  @relation(fields: [accountId], references: [id])
  accountId     String   @db.ObjectId
  supportUser   User     @relation(fields: [supportUserId], references: [id])
  supportUserId String   @db.ObjectId

  @@unique([accountId, supportUserId])
}

//quiz & leads
model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  slug      String
  steps     Json
  Lead      Lead[]
}

model Lead {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  quiz         Quiz          @relation(fields: [quizId], references: [id])
  quizId       String        @db.ObjectId
  quizData     Json
  Transactions Transaction[]
}

model Step {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @db.ObjectId
  steps     Json[]
}

model Intention {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String   @db.ObjectId
  name        String   @unique
  description String
  destiny     String   @default("")
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String   @db.ObjectId
  value     Int
  type      Boolean
}

model TransacionalEmailQueue {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  to        String
  subject   String
  body      String
  status    String   @default("pending") // pending, sent, failed
  error     Json     @default("{}")
  emailId   String   @default("")
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  REJECTED
  WAITING
  SUCCESS
  FAILED
}

enum Role {
  ADMIN
  SUPPORT
  USER
}

enum CampaignType {
  BETA
  PRODUCTION
  MODEL
}

enum VerificationType {
  WELCOME_EMAIL
  PRE_AUTHENTICATION
  VERIFICATION
  VERIFY_SESSION
  RECOVERY
  SET_NEW_PASSWD
  LOGOUT_ALL_SESSIONS
  LOGOUT_SESSION
}
